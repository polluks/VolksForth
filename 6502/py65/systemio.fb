\ System depended IO definitions for 6502 target     cas 26janloadscreen for py65                             cas 15juli2020                                                                                                                                 1  9 +thru                                                                                                                     \\ The following IO definitions are for the py65                   emulator at https://github.com/mnaberez/py65                                                                                    A char can can be read by memory mapped IO at $f004             A char can be written to memory mapped IO at $f001                                                                                                                                                                                                                                                                                                                                                                                                           \ 65KEY? GETKEY              25JAN85RE)           cas 15july2020                                                                CODE 65KEY? ( -- FLAG)  $f004 lda $9ff sta push0a jmp end-code                                                                  CODE GETKEY  ( -- 8B)   $9ff lda  push0a jmp  end-code                                                                          CODE CURON   ( --)  NEXT JMP END-CODE                                                                                           CODE CUROFF   ( --) NEXT JMP END-CODE                                                                                           : 65KEY  ( -- 8B)                                                         BEGIN PAUSE 65KEY?  UNTIL  GETKEY ;                                                                                                                                                                                                                                                                                   \ DECODE EXPECT KEYBOARD      BP28MAY85)          cas 18julisend? (emit 65emit                              cas 15july2020                                                                                                                                                                                                                                                                \ | Code send? ( -- flg )                                       \    $01 # lda   push0a jmp  end-code                                                                                                                                                           Code (emit ( 8b -- )                                              SP X) lda        $f001 sta  (drop  jmp  end-code                                                                                                                                                                                                                                                                                                                                              \ EMIT CR DEL PAGE AT AT?     25JAN85RE)          cas 15july2020                                                                | Variable out    0 out !         | &80 Constant c/row                                                                          : 65emit   ( 8b -- ) pause  1 out +! (emit ;                                                                                    : 65CR     #CR 65emit  #LF 65emit                                          out @  c/row /  1+  c/row *  out ! ;                                                                                 : 65DEL    #bs 65emit  SPACE  #bs 65emit -2 out +! ;                                                                            : 65PAGE   .( insert code for page )  out off ;                                                                                 : 65at ( row col -- )                                               .( insert code for at ) swap  c/row * + out ! ;             : 65AT?  ( -- ROW COL ) out @  c/row /mod  &24 min swap ;       \ 65type                                           cas 15jul2020                                                                : 65type ( adr len -- ) bounds ?DO I c@ emiter14dez88                                                                OUTPUT: DISPLAY   [ HERE OUTPUT ! ]                              65EMIT 65CR 65TYPE 65DEL 65PAGE 65AT 65AT? [                                                                                                                                                   | : (byecas 26jan06                                                                $400 CONSTANT B/BLK    \ Bytes per physical Sector                                                                              $0AA CONSTANT BLK/DRV  \ number of Blocks per Drive                                                                             | VARIABLE (DRV    0 (DRV !                                                                                                     | : DISK ( -- DEV.NO )   (DRV @ 8 + ;                                                                                           : DRIVE  ( DRV# -- )      BLK/DRV *  OFFSET ! ;                                                                                                                                                                                                                                                                                                                                                 \                                                 cas 18juli2020: >DRIVE ( BLOCK DRV# -- BLOCK' )                                   BLK/DRV * +   OFFSET @ - ;                                  : DRV?    ( BLOCK -- DRV# )                                         OFFSET @ + BLK/DRV / ;                                                                                                      : DRVINIT  NOOP ;                                                                                                               : READBLOCK ( ADR BLK )                                           $f011 ! $f013 ! 01 $f010 c! ;                                                                                                 : WRITEBLOCK ( ADR BLK )                                          $f011 ! $f013 ! 02 $f010 c! ;                                                                                                                                                                                                                                 \  (r/w                                           cas 18juli2020                                                                :  (R/W  ( ADR BLK FILE R/WF -- FLAG)                              swap abort" no file"                                            IF readblock  ELSE writeblock  THEN false